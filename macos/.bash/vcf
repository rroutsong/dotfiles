#!/bin/bash

# requires bcftools, cat, gunzip -c, grep, wc, awk, cut, sort, uniq, xargs
# they can be installed from : http://www.htslib.org/
# or from most package managers

# make site-only only GT(Genotype) variation vcf from vcf or vcf.gz
# bcftools annotate -x INFO,FORMAT All_besc_multiallelic_removed.vcf.gz --output test.vcf

function mkvcfgtonly() {
	if [ "$1" != "" ] && [ "$2" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ -f $2 ]; then
			echo "Output file: $2, already exists."
			return 0
		fi

	  eval "bcftools annotate -x INFO,FORMAT,FILTER $1 --output $2"
	else
		echo "Please run mkvcfgtonly [input vcf/vcf.gz file] [output vcf file name]"
		return 0
	fi
}

# count variants in vcf file or vcf.gz
# gunzip -c [file] | grep "^[^#]" | wc -l
function count_variants() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ ${1: -2} == "gz" ]; then
			eval "gunzip -c $1 | grep \"^[^#]\" | wc -l"
		else
			eval "cat $1 | grep \"^[^#]\" | wc -l"
		fi
	else
	    echo "Positional parameter 1 is empty"
	    echo "Please run count_variants [input vcf/vcf.gz file]"
		return 0
	fi
}

# gzhead function for head of .vcf.gz
# gunzip -c [file] | head -n [num]
function gzhead() {
	if [ "$1" != "" ] && [ "$2" == "-n" ] && [ "$3" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		re='^[0-9]+$'
		if ! [[ $3 =~ $re ]] ; then
			echo "Please use an integer amount of lines to print."
			echo "Run gzhead [input .vcf.gz file] -n [number of lines]"
			return 0
		fi

		eval "gunzip -c < $1 | head -n $3"
	else
		echo "Please run gzhead [input .vcf.gz file] -n [number of lines]"
		return 0
	fi
}

# get all unique contig ids from .vcf or .vcf.gz
# grep "^[^#]" [input file] | cut -f1 | sort | uniq
function listcontigsinvcf() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ ${1: -2} == "gz" ]; then
		  eval "zgrep \"^[^#]\" $1 | cut -f1 | uniq"
		else
			eval "grep \"^[^#]\" $1 | cut -f1 | uniq"
		fi
	else
	    echo "Please run listcontigsinvcf [input vcf/vcf.gz file]"
		return 0
	fi
}

# get all samples from vcf:
# grep "#CHROM" output | cut -f 10- 
function listsamplesinvcf() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ ${1: -2} == "gz" ]; then
			eval "zgrep \"#CHROM\" $1 | cut -f 10-"
		else
			eval "grep \"#CHROM\" $1 | cut -f 10-"
		fi
	else
	    echo "Please run listsamplesinvcf [input vcf/vcf.gz file]"
		return 0
	fi
}

# get all samples from vcf, each on a line:
# grep "#CHROM" output | cut -f 10- | xargs -n 1
function listsamplesinvcfnewline() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ ${1: -2} == "gz" ]; then
			eval "zgrep \"#CHROM\" | cut -f 10- | xargs -n 1"
		else
			eval "grep \"#CHROM\" $1 | cut -f 10- | xargs -n 1"
		fi
	else
	    echo "Please run listsamplesinvcfnewline [input vcf/vcf.gz file]"
		return 0
	fi
}

# count all samples from vcf:
# grep "#CHROM" output | cut -f 10- | awk -F '\t' '{ print NF }'
function countsamplesinvcf() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ ${1: -2} == "gz" ]; then
			eval "zgrep \"#CHROM\" $1 | cut -f 10- | awk -F '\\t' '{ print NF }'"
		else
			eval "grep \"#CHROM\" $1 | cut -f 10- | awk -F '\\t' '{ print NF }'"
		fi
	else
	    echo "Please run countsamplesinvcf [input vcf/vcf.gz file]"
		return 0
	fi
}

# view only biallelic snps
# bcftools view --max-alleles 2 input.vcf
function viewonlybiallelic() {
	if [ "$1" != "" ]; then
		if [ ! -f $1 ]; then
			echo "Input file: $1, not found."
			return 0
		fi

		if [ "$2" == "" ]; then
			eval "bcftools view --max-alleles 2 $1"
		else
      if [ -f $2 ]; then
			  echo "Output file: $2, already exists."
			  return 0
		  fi
			
      eval "bcftools view --max-alleles 2 $1 >> $2"
		fi
	else
	    echo "Please run viewonlybiallelic [input vcf/vcf.gz file] [output vcf file name]"
	    echo "Output name is option, without it output it sent to console"
		return 0
	fi
}
